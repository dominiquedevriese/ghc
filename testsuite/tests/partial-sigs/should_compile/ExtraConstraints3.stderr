TYPE SIGNATURES
  !! :: forall a. [a] -> Int -> a
  $ :: forall a b. (a -> b) -> a -> b
  $! :: forall a b. (a -> b) -> a -> b
  && :: Bool -> Bool -> Bool
  * :: forall a. Num a => a -> a -> a
  ** :: forall a. Floating a => a -> a -> a
  + :: forall a. Num a => a -> a -> a
  ++ :: forall a. [a] -> [a] -> [a]
  - :: forall a. Num a => a -> a -> a
  . :: forall b c a. (b -> c) -> (a -> b) -> a -> c
  / :: forall a. Fractional a => a -> a -> a
  /= :: forall a. Eq a => a -> a -> Bool
  < :: forall a. Ord a => a -> a -> Bool
  <= :: forall a. Ord a => a -> a -> Bool
  =<< ::
    forall a (m :: * -> *) b. Monad m => (a -> m b) -> m a -> m b
  == :: forall a. Eq a => a -> a -> Bool
  > :: forall a. Ord a => a -> a -> Bool
  >= :: forall a. Ord a => a -> a -> Bool
  >> :: forall (m :: * -> *) a b. Monad m => m a -> m b -> m b
  >>= ::
    forall (m :: * -> *) a b. Monad m => m a -> (a -> m b) -> m b
  ^ :: forall a b. (Integral b, Num a) => a -> b -> a
  ^^ :: forall a b. (Fractional a, Integral b) => a -> b -> a
  abs :: forall a. Num a => a -> a
  acos :: forall a. Floating a => a -> a
  acosh :: forall a. Floating a => a -> a
  all ::
    forall a (t :: * -> *). P.Foldable t => (a -> Bool) -> t a -> Bool
  and :: forall (t :: * -> *). P.Foldable t => t Bool -> Bool
  any ::
    forall a (t :: * -> *). P.Foldable t => (a -> Bool) -> t a -> Bool
  appendFile :: FilePath -> String -> IO ()
  asTypeOf :: forall a. a -> a -> a
  asin :: forall a. Floating a => a -> a
  asinh :: forall a. Floating a => a -> a
  atan :: forall a. Floating a => a -> a
  atan2 :: forall a. RealFloat a => a -> a -> a
  atanh :: forall a. Floating a => a -> a
  break :: forall a. (a -> Bool) -> [a] -> ([a], [a])
  ceiling :: forall a b. (Integral b, RealFrac a) => a -> b
  compare :: forall a. Ord a => a -> a -> Ordering
  concat :: forall (t :: * -> *) a. P.Foldable t => t [a] -> [a]
  concatMap ::
    forall a b (t :: * -> *). P.Foldable t => (a -> [b]) -> t a -> [b]
  const :: forall a b. a -> b -> a
  cos :: forall a. Floating a => a -> a
  cosh :: forall a. Floating a => a -> a
  curry :: forall a b c. ((a, b) -> c) -> a -> b -> c
  cycle :: forall a. [a] -> [a]
  decodeFloat :: forall a. RealFloat a => a -> (Integer, Int)
  div :: forall a. Integral a => a -> a -> a
  divMod :: forall a. Integral a => a -> a -> (a, a)
  drop :: forall a. Int -> [a] -> [a]
  dropWhile :: forall a. (a -> Bool) -> [a] -> [a]
  either :: forall a c b. (a -> c) -> (b -> c) -> Either a b -> c
  elem ::
    forall (t :: * -> *) a. (Eq a, P.Foldable t) => a -> t a -> Bool
  encodeFloat :: forall a. RealFloat a => Integer -> Int -> a
  enumFrom :: forall a. Enum a => a -> [a]
  enumFromThen :: forall a. Enum a => a -> a -> [a]
  enumFromThenTo :: forall a. Enum a => a -> a -> a -> [a]
  enumFromTo :: forall a. Enum a => a -> a -> [a]
  error :: forall a. [Char] -> a
  even :: forall a. Integral a => a -> Bool
  exp :: forall a. Floating a => a -> a
  exponent :: forall a. RealFloat a => a -> Int
  fail :: forall (m :: * -> *) a. Monad m => String -> m a
  filter :: forall a. (a -> Bool) -> [a] -> [a]
  flip :: forall a b c. (a -> b -> c) -> b -> a -> c
  floatDigits :: forall a. RealFloat a => a -> Int
  floatRadix :: forall a. RealFloat a => a -> Integer
  floatRange :: forall a. RealFloat a => a -> (Int, Int)
  floor :: forall a b. (Integral b, RealFrac a) => a -> b
  fmap ::
    forall (f :: * -> *) a b. Functor f => (a -> b) -> f a -> f b
  foldl ::
    forall (t :: * -> *) b a.
    P.Foldable t =>
    (b -> a -> b) -> b -> t a -> b
  foldl1 ::
    forall (t :: * -> *) a. P.Foldable t => (a -> a -> a) -> t a -> a
  foldr ::
    forall (t :: * -> *) a b.
    P.Foldable t =>
    (a -> b -> b) -> b -> t a -> b
  foldr1 ::
    forall (t :: * -> *) a. P.Foldable t => (a -> a -> a) -> t a -> a
  fromEnum :: forall a. Enum a => a -> Int
  fromInteger :: forall a. Num a => Integer -> a
  fromIntegral :: forall a b. (Integral a, Num b) => a -> b
  fromRational :: forall a. Fractional a => Rational -> a
  fst :: forall a b. (a, b) -> a
  gcd :: forall a. Integral a => a -> a -> a
  getChar :: IO Char
  getContents :: IO String
  getLine :: IO String
  head :: forall a. [a] -> a
  id :: forall a. a -> a
  init :: forall a. [a] -> [a]
  interact :: (String -> String) -> IO ()
  ioError :: forall a. IOError -> IO a
  isDenormalized :: forall a. RealFloat a => a -> Bool
  isIEEE :: forall a. RealFloat a => a -> Bool
  isInfinite :: forall a. RealFloat a => a -> Bool
  isNaN :: forall a. RealFloat a => a -> Bool
  isNegativeZero :: forall a. RealFloat a => a -> Bool
  iterate :: forall a. (a -> a) -> a -> [a]
  last :: forall a. [a] -> a
  lcm :: forall a. Integral a => a -> a -> a
  length :: forall (t :: * -> *) a. P.Foldable t => t a -> Int
  lex :: ReadS String
  lines :: String -> [String]
  log :: forall a. Floating a => a -> a
  logBase :: forall a. Floating a => a -> a -> a
  lookup :: forall a b. Eq a => a -> [(a, b)] -> Maybe b
  map :: forall a b. (a -> b) -> [a] -> [b]
  mapM ::
    forall (t :: * -> *) a (m :: * -> *) b.
    (Monad m, P.Traversable t) =>
    (a -> m b) -> t a -> m (t b)
  mapM_ ::
    forall a (m :: * -> *) b (t :: * -> *).
    (Monad m, P.Foldable t) =>
    (a -> m b) -> t a -> m ()
  max :: forall a. Ord a => a -> a -> a
  maxBound :: forall w_. Bounded w_ => w_
  maximum ::
    forall (t :: * -> *) a. (Ord a, P.Foldable t) => t a -> a
  maybe :: forall b a. b -> (a -> b) -> Maybe a -> b
  min :: forall a. Ord a => a -> a -> a
  minBound :: forall w_. Bounded w_ => w_
  minimum ::
    forall (t :: * -> *) a. (Ord a, P.Foldable t) => t a -> a
  mod :: forall a. Integral a => a -> a -> a
  negate :: forall a. Num a => a -> a
  not :: Bool -> Bool
  notElem ::
    forall a (t :: * -> *). (Eq a, P.Foldable t) => a -> t a -> Bool
  null :: forall (t :: * -> *) a. P.Foldable t => t a -> Bool
  odd :: forall a. Integral a => a -> Bool
  or :: forall (t :: * -> *). P.Foldable t => t Bool -> Bool
  otherwise :: Bool
  pi :: forall w_. Floating w_ => w_
  pred :: forall a. Enum a => a -> a
  print :: forall a. Show a => a -> IO ()
  product ::
    forall (t :: * -> *) a. (Num a, P.Foldable t) => t a -> a
  properFraction ::
    forall a b. (Integral b, RealFrac a) => a -> (b, a)
  putChar :: Char -> IO ()
  putStr :: String -> IO ()
  putStrLn :: String -> IO ()
  quot :: forall a. Integral a => a -> a -> a
  quotRem :: forall a. Integral a => a -> a -> (a, a)
  read :: forall a. Read a => String -> a
  readFile :: FilePath -> IO String
  readIO :: forall a. Read a => String -> IO a
  readList :: forall a. Read a => ReadS [a]
  readLn :: forall a. Read a => IO a
  readParen :: forall a. Bool -> ReadS a -> ReadS a
  reads :: forall a. Read a => ReadS a
  readsPrec :: forall a. Read a => Int -> ReadS a
  realToFrac :: forall a b. (Fractional b, Real a) => a -> b
  recip :: forall a. Fractional a => a -> a
  rem :: forall a. Integral a => a -> a -> a
  repeat :: forall a. a -> [a]
  replicate :: forall a. Int -> a -> [a]
  return :: forall (m :: * -> *) a. Monad m => a -> m a
  reverse :: forall a. [a] -> [a]
  round :: forall a b. (Integral b, RealFrac a) => a -> b
  scaleFloat :: forall a. RealFloat a => Int -> a -> a
  scanl :: forall b a. (b -> a -> b) -> b -> [a] -> [b]
  scanl1 :: forall a. (a -> a -> a) -> [a] -> [a]
  scanr :: forall a b. (a -> b -> b) -> b -> [a] -> [b]
  scanr1 :: forall a. (a -> a -> a) -> [a] -> [a]
  seq :: forall a b. a -> b -> b
  sequence ::
    forall (t :: * -> *) (m :: * -> *) a.
    (Monad m, P.Traversable t) =>
    t (m a) -> m (t a)
  sequence_ ::
    forall (t :: * -> *) (m :: * -> *) a.
    (Monad m, P.Foldable t) =>
    t (m a) -> m ()
  show :: forall a. Show a => a -> String
  showChar :: Char -> ShowS
  showList :: forall a. Show a => [a] -> ShowS
  showParen :: Bool -> ShowS -> ShowS
  showString :: String -> ShowS
  shows :: forall a. Show a => a -> ShowS
  showsPrec :: forall a. Show a => Int -> a -> ShowS
  significand :: forall a. RealFloat a => a -> a
  signum :: forall a. Num a => a -> a
  sin :: forall a. Floating a => a -> a
  sinh :: forall a. Floating a => a -> a
  snd :: forall a b. (a, b) -> b
  span :: forall a. (a -> Bool) -> [a] -> ([a], [a])
  splitAt :: forall a. Int -> [a] -> ([a], [a])
  sqrt :: forall a. Floating a => a -> a
  subtract :: forall a. Num a => a -> a -> a
  succ :: forall a. Enum a => a -> a
  sum :: forall (t :: * -> *) a. (Num a, P.Foldable t) => t a -> a
  tail :: forall a. [a] -> [a]
  take :: forall a. Int -> [a] -> [a]
  takeWhile :: forall a. (a -> Bool) -> [a] -> [a]
  tan :: forall a. Floating a => a -> a
  tanh :: forall a. Floating a => a -> a
  toEnum :: forall a. Enum a => Int -> a
  toInteger :: forall a. Integral a => a -> Integer
  toRational :: forall a. Real a => a -> Rational
  truncate :: forall a b. (Integral b, RealFrac a) => a -> b
  uncurry :: forall a b c. (a -> b -> c) -> (a, b) -> c
  undefined :: forall w_. w_
  unlines :: [String] -> String
  until :: forall a. (a -> Bool) -> (a -> a) -> a -> a
  unwords :: [String] -> String
  unzip :: forall a b. [(a, b)] -> ([a], [b])
  unzip3 :: forall a b c. [(a, b, c)] -> ([a], [b], [c])
  userError :: String -> IOError
  words :: String -> [String]
  writeFile :: FilePath -> String -> IO ()
  zip :: forall a b. [a] -> [b] -> [(a, b)]
  zip3 :: forall a b c. [a] -> [b] -> [c] -> [(a, b, c)]
  zipWith :: forall a b c. (a -> b -> c) -> [a] -> [b] -> [c]
  zipWith3 ::
    forall a b c d. (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
  || :: Bool -> Bool -> Bool
TYPE CONSTRUCTORS
COERCION AXIOMS
Dependent modules: []
Dependent packages: [base-4.8.0.0, ghc-prim-0.3.1.0,
                     integer-gmp-1.0.0.0]

ExtraConstraints3.hs:16:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘!!’: _ => _

ExtraConstraints3.hs:16:14: Warning:
    Found hole ‘_’ with type: [a] -> Int -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of !! :: [a] -> Int -> a
               at ExtraConstraints3.hs:17:1
    In the type signature for ‘!!’: _ => _

ExtraConstraints3.hs:18:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘$!’: _ => _

ExtraConstraints3.hs:18:14: Warning:
    Found hole ‘_’ with type: (a -> b) -> a -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of $! :: (a -> b) -> a -> b
               at ExtraConstraints3.hs:19:1
           ‘b’ is a rigid type variable bound by
               the inferred type of $! :: (a -> b) -> a -> b
               at ExtraConstraints3.hs:19:1
    In the type signature for ‘$!’: _ => _

ExtraConstraints3.hs:20:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘$’: _ => _

ExtraConstraints3.hs:20:13: Warning:
    Found hole ‘_’ with type: (a -> b) -> a -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of $ :: (a -> b) -> a -> b
               at ExtraConstraints3.hs:21:1
           ‘b’ is a rigid type variable bound by
               the inferred type of $ :: (a -> b) -> a -> b
               at ExtraConstraints3.hs:21:1
    In the type signature for ‘$’: _ => _

ExtraConstraints3.hs:22:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘&&’: _ => _

ExtraConstraints3.hs:22:14: Warning:
    Found hole ‘_’ with type: Bool -> Bool -> Bool
    In the type signature for ‘&&’: _ => _

ExtraConstraints3.hs:24:8: Warning:
    Found hole ‘_’ with inferred constraints: (Num a)
    In the type signature for ‘*’: _ => _

ExtraConstraints3.hs:24:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of * :: Num a => a -> a -> a
               at ExtraConstraints3.hs:25:1
    In the type signature for ‘*’: _ => _

ExtraConstraints3.hs:26:9: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘**’: _ => _

ExtraConstraints3.hs:26:14: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of ** :: Floating a => a -> a -> a
               at ExtraConstraints3.hs:27:1
    In the type signature for ‘**’: _ => _

ExtraConstraints3.hs:28:8: Warning:
    Found hole ‘_’ with inferred constraints: (Num a)
    In the type signature for ‘+’: _ => _

ExtraConstraints3.hs:28:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of + :: Num a => a -> a -> a
               at ExtraConstraints3.hs:29:1
    In the type signature for ‘+’: _ => _

ExtraConstraints3.hs:30:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘++’: _ => _

ExtraConstraints3.hs:30:14: Warning:
    Found hole ‘_’ with type: [a] -> [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of ++ :: [a] -> [a] -> [a]
               at ExtraConstraints3.hs:31:1
    In the type signature for ‘++’: _ => _

ExtraConstraints3.hs:32:8: Warning:
    Found hole ‘_’ with inferred constraints: (Num a)
    In the type signature for ‘-’: _ => _

ExtraConstraints3.hs:32:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of - :: Num a => a -> a -> a
               at ExtraConstraints3.hs:33:1
    In the type signature for ‘-’: _ => _

ExtraConstraints3.hs:34:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘.’: _ => _

ExtraConstraints3.hs:34:13: Warning:
    Found hole ‘_’ with type: (b -> c) -> (a -> b) -> a -> c
    Where: ‘b’ is a rigid type variable bound by
               the inferred type of . :: (b -> c) -> (a -> b) -> a -> c
               at ExtraConstraints3.hs:35:1
           ‘c’ is a rigid type variable bound by
               the inferred type of . :: (b -> c) -> (a -> b) -> a -> c
               at ExtraConstraints3.hs:35:1
           ‘a’ is a rigid type variable bound by
               the inferred type of . :: (b -> c) -> (a -> b) -> a -> c
               at ExtraConstraints3.hs:35:1
    In the type signature for ‘.’: _ => _

ExtraConstraints3.hs:36:8: Warning:
    Found hole ‘_’ with inferred constraints: (Fractional a)
    In the type signature for ‘/’: _ => _

ExtraConstraints3.hs:36:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of / :: Fractional a => a -> a -> a
               at ExtraConstraints3.hs:37:1
    In the type signature for ‘/’: _ => _

ExtraConstraints3.hs:38:9: Warning:
    Found hole ‘_’ with inferred constraints: (Eq a)
    In the type signature for ‘/=’: _ => _

ExtraConstraints3.hs:38:14: Warning:
    Found hole ‘_’ with type: a -> a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of /= :: Eq a => a -> a -> Bool
               at ExtraConstraints3.hs:39:1
    In the type signature for ‘/=’: _ => _

ExtraConstraints3.hs:40:8: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a)
    In the type signature for ‘<’: _ => _

ExtraConstraints3.hs:40:13: Warning:
    Found hole ‘_’ with type: a -> a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of < :: Ord a => a -> a -> Bool
               at ExtraConstraints3.hs:41:1
    In the type signature for ‘<’: _ => _

ExtraConstraints3.hs:42:9: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a)
    In the type signature for ‘<=’: _ => _

ExtraConstraints3.hs:42:14: Warning:
    Found hole ‘_’ with type: a -> a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of <= :: Ord a => a -> a -> Bool
               at ExtraConstraints3.hs:43:1
    In the type signature for ‘<=’: _ => _

ExtraConstraints3.hs:44:10: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m)
    In the type signature for ‘=<<’: _ => _

ExtraConstraints3.hs:44:15: Warning:
    Found hole ‘_’ with type: (a -> m b) -> m a -> m b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of =<< :: Monad m => (a -> m b) -> m a -> m b
               at ExtraConstraints3.hs:45:1
           ‘m’ is a rigid type variable bound by
               the inferred type of =<< :: Monad m => (a -> m b) -> m a -> m b
               at ExtraConstraints3.hs:45:1
           ‘b’ is a rigid type variable bound by
               the inferred type of =<< :: Monad m => (a -> m b) -> m a -> m b
               at ExtraConstraints3.hs:45:1
    In the type signature for ‘=<<’: _ => _

ExtraConstraints3.hs:46:9: Warning:
    Found hole ‘_’ with inferred constraints: (Eq a)
    In the type signature for ‘==’: _ => _

ExtraConstraints3.hs:46:14: Warning:
    Found hole ‘_’ with type: a -> a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of == :: Eq a => a -> a -> Bool
               at ExtraConstraints3.hs:47:1
    In the type signature for ‘==’: _ => _

ExtraConstraints3.hs:48:8: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a)
    In the type signature for ‘>’: _ => _

ExtraConstraints3.hs:48:13: Warning:
    Found hole ‘_’ with type: a -> a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of > :: Ord a => a -> a -> Bool
               at ExtraConstraints3.hs:49:1
    In the type signature for ‘>’: _ => _

ExtraConstraints3.hs:50:9: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a)
    In the type signature for ‘>=’: _ => _

ExtraConstraints3.hs:50:14: Warning:
    Found hole ‘_’ with type: a -> a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of >= :: Ord a => a -> a -> Bool
               at ExtraConstraints3.hs:51:1
    In the type signature for ‘>=’: _ => _

ExtraConstraints3.hs:52:9: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m)
    In the type signature for ‘>>’: _ => _

ExtraConstraints3.hs:52:14: Warning:
    Found hole ‘_’ with type: m a -> m b -> m b
    Where: ‘m’ is a rigid type variable bound by
               the inferred type of >> :: Monad m => m a -> m b -> m b
               at ExtraConstraints3.hs:53:1
           ‘a’ is a rigid type variable bound by
               the inferred type of >> :: Monad m => m a -> m b -> m b
               at ExtraConstraints3.hs:53:1
           ‘b’ is a rigid type variable bound by
               the inferred type of >> :: Monad m => m a -> m b -> m b
               at ExtraConstraints3.hs:53:1
    In the type signature for ‘>>’: _ => _

ExtraConstraints3.hs:54:10: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m)
    In the type signature for ‘>>=’: _ => _

ExtraConstraints3.hs:54:15: Warning:
    Found hole ‘_’ with type: m a -> (a -> m b) -> m b
    Where: ‘m’ is a rigid type variable bound by
               the inferred type of >>= :: Monad m => m a -> (a -> m b) -> m b
               at ExtraConstraints3.hs:55:1
           ‘a’ is a rigid type variable bound by
               the inferred type of >>= :: Monad m => m a -> (a -> m b) -> m b
               at ExtraConstraints3.hs:55:1
           ‘b’ is a rigid type variable bound by
               the inferred type of >>= :: Monad m => m a -> (a -> m b) -> m b
               at ExtraConstraints3.hs:55:1
    In the type signature for ‘>>=’: _ => _

ExtraConstraints3.hs:56:8: Warning:
    Found hole ‘_’ with inferred constraints: (Integral b, Num a)
    In the type signature for ‘^’: _ => _

ExtraConstraints3.hs:56:13: Warning:
    Found hole ‘_’ with type: a -> b -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of ^ :: (Integral b, Num a) => a -> b -> a
               at ExtraConstraints3.hs:57:1
           ‘b’ is a rigid type variable bound by
               the inferred type of ^ :: (Integral b, Num a) => a -> b -> a
               at ExtraConstraints3.hs:57:1
    In the type signature for ‘^’: _ => _

ExtraConstraints3.hs:58:9: Warning:
    Found hole ‘_’ with inferred constraints: (Fractional a,
                                               Integral b)
    In the type signature for ‘^^’: _ => _

ExtraConstraints3.hs:58:14: Warning:
    Found hole ‘_’ with type: a -> b -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               ^^ :: (Fractional a, Integral b) => a -> b -> a
               at ExtraConstraints3.hs:59:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               ^^ :: (Fractional a, Integral b) => a -> b -> a
               at ExtraConstraints3.hs:59:1
    In the type signature for ‘^^’: _ => _

ExtraConstraints3.hs:60:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘||’: _ => _

ExtraConstraints3.hs:60:14: Warning:
    Found hole ‘_’ with type: Bool -> Bool -> Bool
    In the type signature for ‘||’: _ => _

ExtraConstraints3.hs:62:8: Warning:
    Found hole ‘_’ with inferred constraints: (Num a)
    In the type signature for ‘abs’: _ => _

ExtraConstraints3.hs:62:13: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of abs :: Num a => a -> a
               at ExtraConstraints3.hs:63:1
    In the type signature for ‘abs’: _ => _

ExtraConstraints3.hs:64:9: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘acos’: _ => _

ExtraConstraints3.hs:64:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of acos :: Floating a => a -> a
               at ExtraConstraints3.hs:65:1
    In the type signature for ‘acos’: _ => _

ExtraConstraints3.hs:66:10: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘acosh’: _ => _

ExtraConstraints3.hs:66:15: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of acosh :: Floating a => a -> a
               at ExtraConstraints3.hs:67:1
    In the type signature for ‘acosh’: _ => _

ExtraConstraints3.hs:68:8: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘all’: _ => _

ExtraConstraints3.hs:68:13: Warning:
    Found hole ‘_’ with type: (a -> Bool) -> t a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               all :: P.Foldable t => (a -> Bool) -> t a -> Bool
               at ExtraConstraints3.hs:69:1
           ‘t’ is a rigid type variable bound by
               the inferred type of
               all :: P.Foldable t => (a -> Bool) -> t a -> Bool
               at ExtraConstraints3.hs:69:1
    In the type signature for ‘all’: _ => _

ExtraConstraints3.hs:70:8: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘and’: _ => _

ExtraConstraints3.hs:70:13: Warning:
    Found hole ‘_’ with type: t Bool -> Bool
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of and :: P.Foldable t => t Bool -> Bool
               at ExtraConstraints3.hs:71:1
    In the type signature for ‘and’: _ => _

ExtraConstraints3.hs:72:8: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘any’: _ => _

ExtraConstraints3.hs:72:13: Warning:
    Found hole ‘_’ with type: (a -> Bool) -> t a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               any :: P.Foldable t => (a -> Bool) -> t a -> Bool
               at ExtraConstraints3.hs:73:1
           ‘t’ is a rigid type variable bound by
               the inferred type of
               any :: P.Foldable t => (a -> Bool) -> t a -> Bool
               at ExtraConstraints3.hs:73:1
    In the type signature for ‘any’: _ => _

ExtraConstraints3.hs:74:15: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘appendFile’: _ => _

ExtraConstraints3.hs:74:20: Warning:
    Found hole ‘_’ with type: FilePath -> String -> IO ()
    In the type signature for ‘appendFile’: _ => _

ExtraConstraints3.hs:76:13: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘asTypeOf’: _ => _

ExtraConstraints3.hs:76:18: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of asTypeOf :: a -> a -> a
               at ExtraConstraints3.hs:77:1
    In the type signature for ‘asTypeOf’: _ => _

ExtraConstraints3.hs:78:9: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘asin’: _ => _

ExtraConstraints3.hs:78:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of asin :: Floating a => a -> a
               at ExtraConstraints3.hs:79:1
    In the type signature for ‘asin’: _ => _

ExtraConstraints3.hs:80:10: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘asinh’: _ => _

ExtraConstraints3.hs:80:15: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of asinh :: Floating a => a -> a
               at ExtraConstraints3.hs:81:1
    In the type signature for ‘asinh’: _ => _

ExtraConstraints3.hs:82:9: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘atan’: _ => _

ExtraConstraints3.hs:82:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of atan :: Floating a => a -> a
               at ExtraConstraints3.hs:83:1
    In the type signature for ‘atan’: _ => _

ExtraConstraints3.hs:84:10: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘atan2’: _ => _

ExtraConstraints3.hs:84:15: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of atan2 :: RealFloat a => a -> a -> a
               at ExtraConstraints3.hs:85:1
    In the type signature for ‘atan2’: _ => _

ExtraConstraints3.hs:86:10: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘atanh’: _ => _

ExtraConstraints3.hs:86:15: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of atanh :: Floating a => a -> a
               at ExtraConstraints3.hs:87:1
    In the type signature for ‘atanh’: _ => _

ExtraConstraints3.hs:88:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘break’: _ => _

ExtraConstraints3.hs:88:15: Warning:
    Found hole ‘_’ with type: (a -> Bool) -> [a] -> ([a], [a])
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of break :: (a -> Bool) -> [a] -> ([a], [a])
               at ExtraConstraints3.hs:89:1
    In the type signature for ‘break’: _ => _

ExtraConstraints3.hs:90:12: Warning:
    Found hole ‘_’ with inferred constraints: (Integral b, RealFrac a)
    In the type signature for ‘ceiling’: _ => _

ExtraConstraints3.hs:90:17: Warning:
    Found hole ‘_’ with type: a -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of ceiling :: (Integral b, RealFrac a) => a -> b
               at ExtraConstraints3.hs:91:1
           ‘b’ is a rigid type variable bound by
               the inferred type of ceiling :: (Integral b, RealFrac a) => a -> b
               at ExtraConstraints3.hs:91:1
    In the type signature for ‘ceiling’: _ => _

ExtraConstraints3.hs:92:12: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a)
    In the type signature for ‘compare’: _ => _

ExtraConstraints3.hs:92:17: Warning:
    Found hole ‘_’ with type: a -> a -> Ordering
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of compare :: Ord a => a -> a -> Ordering
               at ExtraConstraints3.hs:93:1
    In the type signature for ‘compare’: _ => _

ExtraConstraints3.hs:94:11: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘concat’: _ => _

ExtraConstraints3.hs:94:16: Warning:
    Found hole ‘_’ with type: t [a] -> [a]
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of concat :: P.Foldable t => t [a] -> [a]
               at ExtraConstraints3.hs:95:1
           ‘a’ is a rigid type variable bound by
               the inferred type of concat :: P.Foldable t => t [a] -> [a]
               at ExtraConstraints3.hs:95:1
    In the type signature for ‘concat’: _ => _

ExtraConstraints3.hs:96:14: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘concatMap’: _ => _

ExtraConstraints3.hs:96:19: Warning:
    Found hole ‘_’ with type: (a -> [b]) -> t a -> [b]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               concatMap :: P.Foldable t => (a -> [b]) -> t a -> [b]
               at ExtraConstraints3.hs:97:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               concatMap :: P.Foldable t => (a -> [b]) -> t a -> [b]
               at ExtraConstraints3.hs:97:1
           ‘t’ is a rigid type variable bound by
               the inferred type of
               concatMap :: P.Foldable t => (a -> [b]) -> t a -> [b]
               at ExtraConstraints3.hs:97:1
    In the type signature for ‘concatMap’: _ => _

ExtraConstraints3.hs:98:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘const’: _ => _

ExtraConstraints3.hs:98:15: Warning:
    Found hole ‘_’ with type: a -> b -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of const :: a -> b -> a
               at ExtraConstraints3.hs:99:1
           ‘b’ is a rigid type variable bound by
               the inferred type of const :: a -> b -> a
               at ExtraConstraints3.hs:99:1
    In the type signature for ‘const’: _ => _

ExtraConstraints3.hs:100:8: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘cos’: _ => _

ExtraConstraints3.hs:100:13: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of cos :: Floating a => a -> a
               at ExtraConstraints3.hs:101:1
    In the type signature for ‘cos’: _ => _

ExtraConstraints3.hs:102:9: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘cosh’: _ => _

ExtraConstraints3.hs:102:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of cosh :: Floating a => a -> a
               at ExtraConstraints3.hs:103:1
    In the type signature for ‘cosh’: _ => _

ExtraConstraints3.hs:104:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘curry’: _ => _

ExtraConstraints3.hs:104:15: Warning:
    Found hole ‘_’ with type: ((a, b) -> c) -> a -> b -> c
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of curry :: ((a, b) -> c) -> a -> b -> c
               at ExtraConstraints3.hs:105:1
           ‘b’ is a rigid type variable bound by
               the inferred type of curry :: ((a, b) -> c) -> a -> b -> c
               at ExtraConstraints3.hs:105:1
           ‘c’ is a rigid type variable bound by
               the inferred type of curry :: ((a, b) -> c) -> a -> b -> c
               at ExtraConstraints3.hs:105:1
    In the type signature for ‘curry’: _ => _

ExtraConstraints3.hs:106:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘cycle’: _ => _

ExtraConstraints3.hs:106:15: Warning:
    Found hole ‘_’ with type: [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of cycle :: [a] -> [a]
               at ExtraConstraints3.hs:107:1
    In the type signature for ‘cycle’: _ => _

ExtraConstraints3.hs:108:16: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘decodeFloat’: _ => _

ExtraConstraints3.hs:108:21: Warning:
    Found hole ‘_’ with type: a -> (Integer, Int)
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               decodeFloat :: RealFloat a => a -> (Integer, Int)
               at ExtraConstraints3.hs:109:1
    In the type signature for ‘decodeFloat’: _ => _

ExtraConstraints3.hs:110:8: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘div’: _ => _

ExtraConstraints3.hs:110:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of div :: Integral a => a -> a -> a
               at ExtraConstraints3.hs:111:1
    In the type signature for ‘div’: _ => _

ExtraConstraints3.hs:112:11: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘divMod’: _ => _

ExtraConstraints3.hs:112:16: Warning:
    Found hole ‘_’ with type: a -> a -> (a, a)
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of divMod :: Integral a => a -> a -> (a, a)
               at ExtraConstraints3.hs:113:1
    In the type signature for ‘divMod’: _ => _

ExtraConstraints3.hs:114:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘drop’: _ => _

ExtraConstraints3.hs:114:14: Warning:
    Found hole ‘_’ with type: Int -> [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of drop :: Int -> [a] -> [a]
               at ExtraConstraints3.hs:115:1
    In the type signature for ‘drop’: _ => _

ExtraConstraints3.hs:116:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘dropWhile’: _ => _

ExtraConstraints3.hs:116:19: Warning:
    Found hole ‘_’ with type: (a -> Bool) -> [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of dropWhile :: (a -> Bool) -> [a] -> [a]
               at ExtraConstraints3.hs:117:1
    In the type signature for ‘dropWhile’: _ => _

ExtraConstraints3.hs:118:11: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘either’: _ => _

ExtraConstraints3.hs:118:16: Warning:
    Found hole ‘_’ with type: (a -> c) -> (b -> c) -> Either a b -> c
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               either :: (a -> c) -> (b -> c) -> Either a b -> c
               at ExtraConstraints3.hs:119:1
           ‘c’ is a rigid type variable bound by
               the inferred type of
               either :: (a -> c) -> (b -> c) -> Either a b -> c
               at ExtraConstraints3.hs:119:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               either :: (a -> c) -> (b -> c) -> Either a b -> c
               at ExtraConstraints3.hs:119:1
    In the type signature for ‘either’: _ => _

ExtraConstraints3.hs:120:9: Warning:
    Found hole ‘_’ with inferred constraints: (Eq a, P.Foldable t)
    In the type signature for ‘elem’: _ => _

ExtraConstraints3.hs:120:14: Warning:
    Found hole ‘_’ with type: a -> t a -> Bool
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of
               elem :: (Eq a, P.Foldable t) => a -> t a -> Bool
               at ExtraConstraints3.hs:121:1
           ‘a’ is a rigid type variable bound by
               the inferred type of
               elem :: (Eq a, P.Foldable t) => a -> t a -> Bool
               at ExtraConstraints3.hs:121:1
    In the type signature for ‘elem’: _ => _

ExtraConstraints3.hs:122:16: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘encodeFloat’: _ => _

ExtraConstraints3.hs:122:21: Warning:
    Found hole ‘_’ with type: Integer -> Int -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               encodeFloat :: RealFloat a => Integer -> Int -> a
               at ExtraConstraints3.hs:123:1
    In the type signature for ‘encodeFloat’: _ => _

ExtraConstraints3.hs:124:13: Warning:
    Found hole ‘_’ with inferred constraints: (Enum a)
    In the type signature for ‘enumFrom’: _ => _

ExtraConstraints3.hs:124:18: Warning:
    Found hole ‘_’ with type: a -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of enumFrom :: Enum a => a -> [a]
               at ExtraConstraints3.hs:125:1
    In the type signature for ‘enumFrom’: _ => _

ExtraConstraints3.hs:126:17: Warning:
    Found hole ‘_’ with inferred constraints: (Enum a)
    In the type signature for ‘enumFromThen’: _ => _

ExtraConstraints3.hs:126:22: Warning:
    Found hole ‘_’ with type: a -> a -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of enumFromThen :: Enum a => a -> a -> [a]
               at ExtraConstraints3.hs:127:1
    In the type signature for ‘enumFromThen’: _ => _

ExtraConstraints3.hs:128:19: Warning:
    Found hole ‘_’ with inferred constraints: (Enum a)
    In the type signature for ‘enumFromThenTo’: _ => _

ExtraConstraints3.hs:128:24: Warning:
    Found hole ‘_’ with type: a -> a -> a -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of enumFromThenTo :: Enum a => a -> a -> a -> [a]
               at ExtraConstraints3.hs:129:1
    In the type signature for ‘enumFromThenTo’: _ => _

ExtraConstraints3.hs:130:15: Warning:
    Found hole ‘_’ with inferred constraints: (Enum a)
    In the type signature for ‘enumFromTo’: _ => _

ExtraConstraints3.hs:130:20: Warning:
    Found hole ‘_’ with type: a -> a -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of enumFromTo :: Enum a => a -> a -> [a]
               at ExtraConstraints3.hs:131:1
    In the type signature for ‘enumFromTo’: _ => _

ExtraConstraints3.hs:132:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘error’: _ => _

ExtraConstraints3.hs:132:15: Warning:
    Found hole ‘_’ with type: [Char] -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of error :: [Char] -> a
               at ExtraConstraints3.hs:133:1
    In the type signature for ‘error’: _ => _

ExtraConstraints3.hs:134:9: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘even’: _ => _

ExtraConstraints3.hs:134:14: Warning:
    Found hole ‘_’ with type: a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of even :: Integral a => a -> Bool
               at ExtraConstraints3.hs:135:1
    In the type signature for ‘even’: _ => _

ExtraConstraints3.hs:136:8: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘exp’: _ => _

ExtraConstraints3.hs:136:13: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of exp :: Floating a => a -> a
               at ExtraConstraints3.hs:137:1
    In the type signature for ‘exp’: _ => _

ExtraConstraints3.hs:138:13: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘exponent’: _ => _

ExtraConstraints3.hs:138:18: Warning:
    Found hole ‘_’ with type: a -> Int
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of exponent :: RealFloat a => a -> Int
               at ExtraConstraints3.hs:139:1
    In the type signature for ‘exponent’: _ => _

ExtraConstraints3.hs:140:9: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m)
    In the type signature for ‘fail’: _ => _

ExtraConstraints3.hs:140:14: Warning:
    Found hole ‘_’ with type: String -> m a
    Where: ‘m’ is a rigid type variable bound by
               the inferred type of fail :: Monad m => String -> m a
               at ExtraConstraints3.hs:141:1
           ‘a’ is a rigid type variable bound by
               the inferred type of fail :: Monad m => String -> m a
               at ExtraConstraints3.hs:141:1
    In the type signature for ‘fail’: _ => _

ExtraConstraints3.hs:142:11: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘filter’: _ => _

ExtraConstraints3.hs:142:16: Warning:
    Found hole ‘_’ with type: (a -> Bool) -> [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of filter :: (a -> Bool) -> [a] -> [a]
               at ExtraConstraints3.hs:143:1
    In the type signature for ‘filter’: _ => _

ExtraConstraints3.hs:144:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘flip’: _ => _

ExtraConstraints3.hs:144:14: Warning:
    Found hole ‘_’ with type: (a -> b -> c) -> b -> a -> c
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of flip :: (a -> b -> c) -> b -> a -> c
               at ExtraConstraints3.hs:145:1
           ‘b’ is a rigid type variable bound by
               the inferred type of flip :: (a -> b -> c) -> b -> a -> c
               at ExtraConstraints3.hs:145:1
           ‘c’ is a rigid type variable bound by
               the inferred type of flip :: (a -> b -> c) -> b -> a -> c
               at ExtraConstraints3.hs:145:1
    In the type signature for ‘flip’: _ => _

ExtraConstraints3.hs:146:16: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘floatDigits’: _ => _

ExtraConstraints3.hs:146:21: Warning:
    Found hole ‘_’ with type: a -> Int
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of floatDigits :: RealFloat a => a -> Int
               at ExtraConstraints3.hs:147:1
    In the type signature for ‘floatDigits’: _ => _

ExtraConstraints3.hs:148:15: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘floatRadix’: _ => _

ExtraConstraints3.hs:148:20: Warning:
    Found hole ‘_’ with type: a -> Integer
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of floatRadix :: RealFloat a => a -> Integer
               at ExtraConstraints3.hs:149:1
    In the type signature for ‘floatRadix’: _ => _

ExtraConstraints3.hs:150:15: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘floatRange’: _ => _

ExtraConstraints3.hs:150:20: Warning:
    Found hole ‘_’ with type: a -> (Int, Int)
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of floatRange :: RealFloat a => a -> (Int, Int)
               at ExtraConstraints3.hs:151:1
    In the type signature for ‘floatRange’: _ => _

ExtraConstraints3.hs:152:10: Warning:
    Found hole ‘_’ with inferred constraints: (Integral b, RealFrac a)
    In the type signature for ‘floor’: _ => _

ExtraConstraints3.hs:152:15: Warning:
    Found hole ‘_’ with type: a -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of floor :: (Integral b, RealFrac a) => a -> b
               at ExtraConstraints3.hs:153:1
           ‘b’ is a rigid type variable bound by
               the inferred type of floor :: (Integral b, RealFrac a) => a -> b
               at ExtraConstraints3.hs:153:1
    In the type signature for ‘floor’: _ => _

ExtraConstraints3.hs:154:9: Warning:
    Found hole ‘_’ with inferred constraints: (Functor f)
    In the type signature for ‘fmap’: _ => _

ExtraConstraints3.hs:154:14: Warning:
    Found hole ‘_’ with type: (a -> b) -> f a -> f b
    Where: ‘f’ is a rigid type variable bound by
               the inferred type of fmap :: Functor f => (a -> b) -> f a -> f b
               at ExtraConstraints3.hs:155:1
           ‘a’ is a rigid type variable bound by
               the inferred type of fmap :: Functor f => (a -> b) -> f a -> f b
               at ExtraConstraints3.hs:155:1
           ‘b’ is a rigid type variable bound by
               the inferred type of fmap :: Functor f => (a -> b) -> f a -> f b
               at ExtraConstraints3.hs:155:1
    In the type signature for ‘fmap’: _ => _

ExtraConstraints3.hs:156:10: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘foldl’: _ => _

ExtraConstraints3.hs:156:15: Warning:
    Found hole ‘_’ with type: (b -> a -> b) -> b -> t a -> b
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of
               foldl :: P.Foldable t => (b -> a -> b) -> b -> t a -> b
               at ExtraConstraints3.hs:157:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               foldl :: P.Foldable t => (b -> a -> b) -> b -> t a -> b
               at ExtraConstraints3.hs:157:1
           ‘a’ is a rigid type variable bound by
               the inferred type of
               foldl :: P.Foldable t => (b -> a -> b) -> b -> t a -> b
               at ExtraConstraints3.hs:157:1
    In the type signature for ‘foldl’: _ => _

ExtraConstraints3.hs:158:11: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘foldl1’: _ => _

ExtraConstraints3.hs:158:16: Warning:
    Found hole ‘_’ with type: (a -> a -> a) -> t a -> a
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of
               foldl1 :: P.Foldable t => (a -> a -> a) -> t a -> a
               at ExtraConstraints3.hs:159:1
           ‘a’ is a rigid type variable bound by
               the inferred type of
               foldl1 :: P.Foldable t => (a -> a -> a) -> t a -> a
               at ExtraConstraints3.hs:159:1
    In the type signature for ‘foldl1’: _ => _

ExtraConstraints3.hs:160:10: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘foldr’: _ => _

ExtraConstraints3.hs:160:15: Warning:
    Found hole ‘_’ with type: (a -> b -> b) -> b -> t a -> b
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of
               foldr :: P.Foldable t => (a -> b -> b) -> b -> t a -> b
               at ExtraConstraints3.hs:161:1
           ‘a’ is a rigid type variable bound by
               the inferred type of
               foldr :: P.Foldable t => (a -> b -> b) -> b -> t a -> b
               at ExtraConstraints3.hs:161:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               foldr :: P.Foldable t => (a -> b -> b) -> b -> t a -> b
               at ExtraConstraints3.hs:161:1
    In the type signature for ‘foldr’: _ => _

ExtraConstraints3.hs:162:11: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘foldr1’: _ => _

ExtraConstraints3.hs:162:16: Warning:
    Found hole ‘_’ with type: (a -> a -> a) -> t a -> a
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of
               foldr1 :: P.Foldable t => (a -> a -> a) -> t a -> a
               at ExtraConstraints3.hs:163:1
           ‘a’ is a rigid type variable bound by
               the inferred type of
               foldr1 :: P.Foldable t => (a -> a -> a) -> t a -> a
               at ExtraConstraints3.hs:163:1
    In the type signature for ‘foldr1’: _ => _

ExtraConstraints3.hs:164:13: Warning:
    Found hole ‘_’ with inferred constraints: (Enum a)
    In the type signature for ‘fromEnum’: _ => _

ExtraConstraints3.hs:164:18: Warning:
    Found hole ‘_’ with type: a -> Int
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of fromEnum :: Enum a => a -> Int
               at ExtraConstraints3.hs:165:1
    In the type signature for ‘fromEnum’: _ => _

ExtraConstraints3.hs:166:16: Warning:
    Found hole ‘_’ with inferred constraints: (Num a)
    In the type signature for ‘fromInteger’: _ => _

ExtraConstraints3.hs:166:21: Warning:
    Found hole ‘_’ with type: Integer -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of fromInteger :: Num a => Integer -> a
               at ExtraConstraints3.hs:167:1
    In the type signature for ‘fromInteger’: _ => _

ExtraConstraints3.hs:168:17: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a, Num b)
    In the type signature for ‘fromIntegral’: _ => _

ExtraConstraints3.hs:168:22: Warning:
    Found hole ‘_’ with type: a -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of fromIntegral :: (Integral a, Num b) => a -> b
               at ExtraConstraints3.hs:169:1
           ‘b’ is a rigid type variable bound by
               the inferred type of fromIntegral :: (Integral a, Num b) => a -> b
               at ExtraConstraints3.hs:169:1
    In the type signature for ‘fromIntegral’: _ => _

ExtraConstraints3.hs:170:17: Warning:
    Found hole ‘_’ with inferred constraints: (Fractional a)
    In the type signature for ‘fromRational’: _ => _

ExtraConstraints3.hs:170:22: Warning:
    Found hole ‘_’ with type: Rational -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of fromRational :: Fractional a => Rational -> a
               at ExtraConstraints3.hs:171:1
    In the type signature for ‘fromRational’: _ => _

ExtraConstraints3.hs:172:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘fst’: _ => _

ExtraConstraints3.hs:172:13: Warning:
    Found hole ‘_’ with type: (a, b) -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of fst :: (a, b) -> a
               at ExtraConstraints3.hs:173:1
           ‘b’ is a rigid type variable bound by
               the inferred type of fst :: (a, b) -> a
               at ExtraConstraints3.hs:173:1
    In the type signature for ‘fst’: _ => _

ExtraConstraints3.hs:174:8: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘gcd’: _ => _

ExtraConstraints3.hs:174:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of gcd :: Integral a => a -> a -> a
               at ExtraConstraints3.hs:175:1
    In the type signature for ‘gcd’: _ => _

ExtraConstraints3.hs:176:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘getChar’: _ => _

ExtraConstraints3.hs:176:17: Warning:
    Found hole ‘_’ with type: IO Char
    In the type signature for ‘getChar’: _ => _

ExtraConstraints3.hs:178:16: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘getContents’: _ => _

ExtraConstraints3.hs:178:21: Warning:
    Found hole ‘_’ with type: IO String
    In the type signature for ‘getContents’: _ => _

ExtraConstraints3.hs:180:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘getLine’: _ => _

ExtraConstraints3.hs:180:17: Warning:
    Found hole ‘_’ with type: IO String
    In the type signature for ‘getLine’: _ => _

ExtraConstraints3.hs:182:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘head’: _ => _

ExtraConstraints3.hs:182:14: Warning:
    Found hole ‘_’ with type: [a] -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of head :: [a] -> a at ExtraConstraints3.hs:183:1
    In the type signature for ‘head’: _ => _

ExtraConstraints3.hs:184:7: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘id’: _ => _

ExtraConstraints3.hs:184:12: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of id :: a -> a at ExtraConstraints3.hs:185:1
    In the type signature for ‘id’: _ => _

ExtraConstraints3.hs:186:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘init’: _ => _

ExtraConstraints3.hs:186:14: Warning:
    Found hole ‘_’ with type: [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of init :: [a] -> [a]
               at ExtraConstraints3.hs:187:1
    In the type signature for ‘init’: _ => _

ExtraConstraints3.hs:188:13: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘interact’: _ => _

ExtraConstraints3.hs:188:18: Warning:
    Found hole ‘_’ with type: (String -> String) -> IO ()
    In the type signature for ‘interact’: _ => _

ExtraConstraints3.hs:190:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘ioError’: _ => _

ExtraConstraints3.hs:190:17: Warning:
    Found hole ‘_’ with type: IOError -> IO a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of ioError :: IOError -> IO a
               at ExtraConstraints3.hs:191:1
    In the type signature for ‘ioError’: _ => _

ExtraConstraints3.hs:192:19: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘isDenormalized’: _ => _

ExtraConstraints3.hs:192:24: Warning:
    Found hole ‘_’ with type: a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of isDenormalized :: RealFloat a => a -> Bool
               at ExtraConstraints3.hs:193:1
    In the type signature for ‘isDenormalized’: _ => _

ExtraConstraints3.hs:194:11: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘isIEEE’: _ => _

ExtraConstraints3.hs:194:16: Warning:
    Found hole ‘_’ with type: a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of isIEEE :: RealFloat a => a -> Bool
               at ExtraConstraints3.hs:195:1
    In the type signature for ‘isIEEE’: _ => _

ExtraConstraints3.hs:196:15: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘isInfinite’: _ => _

ExtraConstraints3.hs:196:20: Warning:
    Found hole ‘_’ with type: a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of isInfinite :: RealFloat a => a -> Bool
               at ExtraConstraints3.hs:197:1
    In the type signature for ‘isInfinite’: _ => _

ExtraConstraints3.hs:198:10: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘isNaN’: _ => _

ExtraConstraints3.hs:198:15: Warning:
    Found hole ‘_’ with type: a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of isNaN :: RealFloat a => a -> Bool
               at ExtraConstraints3.hs:199:1
    In the type signature for ‘isNaN’: _ => _

ExtraConstraints3.hs:200:19: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘isNegativeZero’: _ => _

ExtraConstraints3.hs:200:24: Warning:
    Found hole ‘_’ with type: a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of isNegativeZero :: RealFloat a => a -> Bool
               at ExtraConstraints3.hs:201:1
    In the type signature for ‘isNegativeZero’: _ => _

ExtraConstraints3.hs:202:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘iterate’: _ => _

ExtraConstraints3.hs:202:17: Warning:
    Found hole ‘_’ with type: (a -> a) -> a -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of iterate :: (a -> a) -> a -> [a]
               at ExtraConstraints3.hs:203:1
    In the type signature for ‘iterate’: _ => _

ExtraConstraints3.hs:204:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘last’: _ => _

ExtraConstraints3.hs:204:14: Warning:
    Found hole ‘_’ with type: [a] -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of last :: [a] -> a at ExtraConstraints3.hs:205:1
    In the type signature for ‘last’: _ => _

ExtraConstraints3.hs:206:8: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘lcm’: _ => _

ExtraConstraints3.hs:206:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of lcm :: Integral a => a -> a -> a
               at ExtraConstraints3.hs:207:1
    In the type signature for ‘lcm’: _ => _

ExtraConstraints3.hs:208:11: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘length’: _ => _

ExtraConstraints3.hs:208:16: Warning:
    Found hole ‘_’ with type: t a -> Int
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of length :: P.Foldable t => t a -> Int
               at ExtraConstraints3.hs:209:1
           ‘a’ is a rigid type variable bound by
               the inferred type of length :: P.Foldable t => t a -> Int
               at ExtraConstraints3.hs:209:1
    In the type signature for ‘length’: _ => _

ExtraConstraints3.hs:210:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘lex’: _ => _

ExtraConstraints3.hs:210:13: Warning:
    Found hole ‘_’ with type: ReadS String
    In the type signature for ‘lex’: _ => _

ExtraConstraints3.hs:212:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘lines’: _ => _

ExtraConstraints3.hs:212:15: Warning:
    Found hole ‘_’ with type: String -> [String]
    In the type signature for ‘lines’: _ => _

ExtraConstraints3.hs:214:8: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘log’: _ => _

ExtraConstraints3.hs:214:13: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of log :: Floating a => a -> a
               at ExtraConstraints3.hs:215:1
    In the type signature for ‘log’: _ => _

ExtraConstraints3.hs:216:12: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘logBase’: _ => _

ExtraConstraints3.hs:216:17: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of logBase :: Floating a => a -> a -> a
               at ExtraConstraints3.hs:217:1
    In the type signature for ‘logBase’: _ => _

ExtraConstraints3.hs:218:11: Warning:
    Found hole ‘_’ with inferred constraints: (Eq a)
    In the type signature for ‘lookup’: _ => _

ExtraConstraints3.hs:218:16: Warning:
    Found hole ‘_’ with type: a -> [(a, b)] -> Maybe b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of lookup :: Eq a => a -> [(a, b)] -> Maybe b
               at ExtraConstraints3.hs:219:1
           ‘b’ is a rigid type variable bound by
               the inferred type of lookup :: Eq a => a -> [(a, b)] -> Maybe b
               at ExtraConstraints3.hs:219:1
    In the type signature for ‘lookup’: _ => _

ExtraConstraints3.hs:220:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘map’: _ => _

ExtraConstraints3.hs:220:13: Warning:
    Found hole ‘_’ with type: (a -> b) -> [a] -> [b]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of map :: (a -> b) -> [a] -> [b]
               at ExtraConstraints3.hs:221:1
           ‘b’ is a rigid type variable bound by
               the inferred type of map :: (a -> b) -> [a] -> [b]
               at ExtraConstraints3.hs:221:1
    In the type signature for ‘map’: _ => _

ExtraConstraints3.hs:222:9: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m,
                                               P.Traversable t)
    In the type signature for ‘mapM’: _ => _

ExtraConstraints3.hs:222:14: Warning:
    Found hole ‘_’ with type: (a -> m b) -> t a -> m (t b)
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of
               mapM :: (Monad m, P.Traversable t) => (a -> m b) -> t a -> m (t b)
               at ExtraConstraints3.hs:223:1
           ‘a’ is a rigid type variable bound by
               the inferred type of
               mapM :: (Monad m, P.Traversable t) => (a -> m b) -> t a -> m (t b)
               at ExtraConstraints3.hs:223:1
           ‘m’ is a rigid type variable bound by
               the inferred type of
               mapM :: (Monad m, P.Traversable t) => (a -> m b) -> t a -> m (t b)
               at ExtraConstraints3.hs:223:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               mapM :: (Monad m, P.Traversable t) => (a -> m b) -> t a -> m (t b)
               at ExtraConstraints3.hs:223:1
    In the type signature for ‘mapM’: _ => _

ExtraConstraints3.hs:224:10: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m, P.Foldable t)
    In the type signature for ‘mapM_’: _ => _

ExtraConstraints3.hs:224:15: Warning:
    Found hole ‘_’ with type: (a -> m b) -> t a -> m ()
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               mapM_ :: (Monad m, P.Foldable t) => (a -> m b) -> t a -> m ()
               at ExtraConstraints3.hs:225:1
           ‘m’ is a rigid type variable bound by
               the inferred type of
               mapM_ :: (Monad m, P.Foldable t) => (a -> m b) -> t a -> m ()
               at ExtraConstraints3.hs:225:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               mapM_ :: (Monad m, P.Foldable t) => (a -> m b) -> t a -> m ()
               at ExtraConstraints3.hs:225:1
           ‘t’ is a rigid type variable bound by
               the inferred type of
               mapM_ :: (Monad m, P.Foldable t) => (a -> m b) -> t a -> m ()
               at ExtraConstraints3.hs:225:1
    In the type signature for ‘mapM_’: _ => _

ExtraConstraints3.hs:226:8: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a)
    In the type signature for ‘max’: _ => _

ExtraConstraints3.hs:226:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of max :: Ord a => a -> a -> a
               at ExtraConstraints3.hs:227:1
    In the type signature for ‘max’: _ => _

ExtraConstraints3.hs:228:13: Warning:
    Found hole ‘_’ with inferred constraints: (Bounded w_)
    In the type signature for ‘maxBound’: _ => _

ExtraConstraints3.hs:228:18: Warning:
    Found hole ‘_’ with type: w_
    Where: ‘w_’ is a rigid type variable bound by
                the inferred type of maxBound :: Bounded w_ => w_
                at ExtraConstraints3.hs:229:1
    In the type signature for ‘maxBound’: _ => _

ExtraConstraints3.hs:230:12: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a, P.Foldable t)
    In the type signature for ‘maximum’: _ => _

ExtraConstraints3.hs:230:17: Warning:
    Found hole ‘_’ with type: t a -> a
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of maximum :: (Ord a, P.Foldable t) => t a -> a
               at ExtraConstraints3.hs:231:1
           ‘a’ is a rigid type variable bound by
               the inferred type of maximum :: (Ord a, P.Foldable t) => t a -> a
               at ExtraConstraints3.hs:231:1
    In the type signature for ‘maximum’: _ => _

ExtraConstraints3.hs:232:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘maybe’: _ => _

ExtraConstraints3.hs:232:15: Warning:
    Found hole ‘_’ with type: b -> (a -> b) -> Maybe a -> b
    Where: ‘b’ is a rigid type variable bound by
               the inferred type of maybe :: b -> (a -> b) -> Maybe a -> b
               at ExtraConstraints3.hs:233:1
           ‘a’ is a rigid type variable bound by
               the inferred type of maybe :: b -> (a -> b) -> Maybe a -> b
               at ExtraConstraints3.hs:233:1
    In the type signature for ‘maybe’: _ => _

ExtraConstraints3.hs:234:8: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a)
    In the type signature for ‘min’: _ => _

ExtraConstraints3.hs:234:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of min :: Ord a => a -> a -> a
               at ExtraConstraints3.hs:235:1
    In the type signature for ‘min’: _ => _

ExtraConstraints3.hs:236:13: Warning:
    Found hole ‘_’ with inferred constraints: (Bounded w_)
    In the type signature for ‘minBound’: _ => _

ExtraConstraints3.hs:236:18: Warning:
    Found hole ‘_’ with type: w_
    Where: ‘w_’ is a rigid type variable bound by
                the inferred type of minBound :: Bounded w_ => w_
                at ExtraConstraints3.hs:237:1
    In the type signature for ‘minBound’: _ => _

ExtraConstraints3.hs:238:12: Warning:
    Found hole ‘_’ with inferred constraints: (Ord a, P.Foldable t)
    In the type signature for ‘minimum’: _ => _

ExtraConstraints3.hs:238:17: Warning:
    Found hole ‘_’ with type: t a -> a
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of minimum :: (Ord a, P.Foldable t) => t a -> a
               at ExtraConstraints3.hs:239:1
           ‘a’ is a rigid type variable bound by
               the inferred type of minimum :: (Ord a, P.Foldable t) => t a -> a
               at ExtraConstraints3.hs:239:1
    In the type signature for ‘minimum’: _ => _

ExtraConstraints3.hs:240:8: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘mod’: _ => _

ExtraConstraints3.hs:240:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of mod :: Integral a => a -> a -> a
               at ExtraConstraints3.hs:241:1
    In the type signature for ‘mod’: _ => _

ExtraConstraints3.hs:242:11: Warning:
    Found hole ‘_’ with inferred constraints: (Num a)
    In the type signature for ‘negate’: _ => _

ExtraConstraints3.hs:242:16: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of negate :: Num a => a -> a
               at ExtraConstraints3.hs:243:1
    In the type signature for ‘negate’: _ => _

ExtraConstraints3.hs:244:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘not’: _ => _

ExtraConstraints3.hs:244:13: Warning:
    Found hole ‘_’ with type: Bool -> Bool
    In the type signature for ‘not’: _ => _

ExtraConstraints3.hs:246:12: Warning:
    Found hole ‘_’ with inferred constraints: (Eq a, P.Foldable t)
    In the type signature for ‘notElem’: _ => _

ExtraConstraints3.hs:246:17: Warning:
    Found hole ‘_’ with type: a -> t a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               notElem :: (Eq a, P.Foldable t) => a -> t a -> Bool
               at ExtraConstraints3.hs:247:1
           ‘t’ is a rigid type variable bound by
               the inferred type of
               notElem :: (Eq a, P.Foldable t) => a -> t a -> Bool
               at ExtraConstraints3.hs:247:1
    In the type signature for ‘notElem’: _ => _

ExtraConstraints3.hs:248:9: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘null’: _ => _

ExtraConstraints3.hs:248:14: Warning:
    Found hole ‘_’ with type: t a -> Bool
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of null :: P.Foldable t => t a -> Bool
               at ExtraConstraints3.hs:249:1
           ‘a’ is a rigid type variable bound by
               the inferred type of null :: P.Foldable t => t a -> Bool
               at ExtraConstraints3.hs:249:1
    In the type signature for ‘null’: _ => _

ExtraConstraints3.hs:250:8: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘odd’: _ => _

ExtraConstraints3.hs:250:13: Warning:
    Found hole ‘_’ with type: a -> Bool
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of odd :: Integral a => a -> Bool
               at ExtraConstraints3.hs:251:1
    In the type signature for ‘odd’: _ => _

ExtraConstraints3.hs:252:7: Warning:
    Found hole ‘_’ with inferred constraints: (P.Foldable t)
    In the type signature for ‘or’: _ => _

ExtraConstraints3.hs:252:12: Warning:
    Found hole ‘_’ with type: t Bool -> Bool
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of or :: P.Foldable t => t Bool -> Bool
               at ExtraConstraints3.hs:253:1
    In the type signature for ‘or’: _ => _

ExtraConstraints3.hs:254:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘otherwise’: _ => _

ExtraConstraints3.hs:254:19: Warning:
    Found hole ‘_’ with type: Bool
    In the type signature for ‘otherwise’: _ => _

ExtraConstraints3.hs:256:7: Warning:
    Found hole ‘_’ with inferred constraints: (Floating w_)
    In the type signature for ‘pi’: _ => _

ExtraConstraints3.hs:256:12: Warning:
    Found hole ‘_’ with type: w_
    Where: ‘w_’ is a rigid type variable bound by
                the inferred type of pi :: Floating w_ => w_
                at ExtraConstraints3.hs:257:1
    In the type signature for ‘pi’: _ => _

ExtraConstraints3.hs:258:9: Warning:
    Found hole ‘_’ with inferred constraints: (Enum a)
    In the type signature for ‘pred’: _ => _

ExtraConstraints3.hs:258:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of pred :: Enum a => a -> a
               at ExtraConstraints3.hs:259:1
    In the type signature for ‘pred’: _ => _

ExtraConstraints3.hs:260:10: Warning:
    Found hole ‘_’ with inferred constraints: (Show a)
    In the type signature for ‘print’: _ => _

ExtraConstraints3.hs:260:15: Warning:
    Found hole ‘_’ with type: a -> IO ()
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of print :: Show a => a -> IO ()
               at ExtraConstraints3.hs:261:1
    In the type signature for ‘print’: _ => _

ExtraConstraints3.hs:262:12: Warning:
    Found hole ‘_’ with inferred constraints: (Num a, P.Foldable t)
    In the type signature for ‘product’: _ => _

ExtraConstraints3.hs:262:17: Warning:
    Found hole ‘_’ with type: t a -> a
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of product :: (Num a, P.Foldable t) => t a -> a
               at ExtraConstraints3.hs:263:1
           ‘a’ is a rigid type variable bound by
               the inferred type of product :: (Num a, P.Foldable t) => t a -> a
               at ExtraConstraints3.hs:263:1
    In the type signature for ‘product’: _ => _

ExtraConstraints3.hs:264:19: Warning:
    Found hole ‘_’ with inferred constraints: (Integral b, RealFrac a)
    In the type signature for ‘properFraction’: _ => _

ExtraConstraints3.hs:264:24: Warning:
    Found hole ‘_’ with type: a -> (b, a)
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               properFraction :: (Integral b, RealFrac a) => a -> (b, a)
               at ExtraConstraints3.hs:265:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               properFraction :: (Integral b, RealFrac a) => a -> (b, a)
               at ExtraConstraints3.hs:265:1
    In the type signature for ‘properFraction’: _ => _

ExtraConstraints3.hs:266:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘putChar’: _ => _

ExtraConstraints3.hs:266:17: Warning:
    Found hole ‘_’ with type: Char -> IO ()
    In the type signature for ‘putChar’: _ => _

ExtraConstraints3.hs:268:11: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘putStr’: _ => _

ExtraConstraints3.hs:268:16: Warning:
    Found hole ‘_’ with type: String -> IO ()
    In the type signature for ‘putStr’: _ => _

ExtraConstraints3.hs:270:13: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘putStrLn’: _ => _

ExtraConstraints3.hs:270:18: Warning:
    Found hole ‘_’ with type: String -> IO ()
    In the type signature for ‘putStrLn’: _ => _

ExtraConstraints3.hs:272:9: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘quot’: _ => _

ExtraConstraints3.hs:272:14: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of quot :: Integral a => a -> a -> a
               at ExtraConstraints3.hs:273:1
    In the type signature for ‘quot’: _ => _

ExtraConstraints3.hs:274:12: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘quotRem’: _ => _

ExtraConstraints3.hs:274:17: Warning:
    Found hole ‘_’ with type: a -> a -> (a, a)
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of quotRem :: Integral a => a -> a -> (a, a)
               at ExtraConstraints3.hs:275:1
    In the type signature for ‘quotRem’: _ => _

ExtraConstraints3.hs:276:9: Warning:
    Found hole ‘_’ with inferred constraints: (Read a)
    In the type signature for ‘read’: _ => _

ExtraConstraints3.hs:276:14: Warning:
    Found hole ‘_’ with type: String -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of read :: Read a => String -> a
               at ExtraConstraints3.hs:277:1
    In the type signature for ‘read’: _ => _

ExtraConstraints3.hs:278:13: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘readFile’: _ => _

ExtraConstraints3.hs:278:18: Warning:
    Found hole ‘_’ with type: FilePath -> IO String
    In the type signature for ‘readFile’: _ => _

ExtraConstraints3.hs:280:11: Warning:
    Found hole ‘_’ with inferred constraints: (Read a)
    In the type signature for ‘readIO’: _ => _

ExtraConstraints3.hs:280:16: Warning:
    Found hole ‘_’ with type: String -> IO a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of readIO :: Read a => String -> IO a
               at ExtraConstraints3.hs:281:1
    In the type signature for ‘readIO’: _ => _

ExtraConstraints3.hs:282:13: Warning:
    Found hole ‘_’ with inferred constraints: (Read a)
    In the type signature for ‘readList’: _ => _

ExtraConstraints3.hs:282:18: Warning:
    Found hole ‘_’ with type: ReadS [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of readList :: Read a => ReadS [a]
               at ExtraConstraints3.hs:283:1
    In the type signature for ‘readList’: _ => _

ExtraConstraints3.hs:284:11: Warning:
    Found hole ‘_’ with inferred constraints: (Read a)
    In the type signature for ‘readLn’: _ => _

ExtraConstraints3.hs:284:16: Warning:
    Found hole ‘_’ with type: IO a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of readLn :: Read a => IO a
               at ExtraConstraints3.hs:285:1
    In the type signature for ‘readLn’: _ => _

ExtraConstraints3.hs:286:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘readParen’: _ => _

ExtraConstraints3.hs:286:19: Warning:
    Found hole ‘_’ with type: Bool -> ReadS a -> ReadS a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of readParen :: Bool -> ReadS a -> ReadS a
               at ExtraConstraints3.hs:287:1
    In the type signature for ‘readParen’: _ => _

ExtraConstraints3.hs:288:10: Warning:
    Found hole ‘_’ with inferred constraints: (Read a)
    In the type signature for ‘reads’: _ => _

ExtraConstraints3.hs:288:15: Warning:
    Found hole ‘_’ with type: ReadS a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of reads :: Read a => ReadS a
               at ExtraConstraints3.hs:289:1
    In the type signature for ‘reads’: _ => _

ExtraConstraints3.hs:290:14: Warning:
    Found hole ‘_’ with inferred constraints: (Read a)
    In the type signature for ‘readsPrec’: _ => _

ExtraConstraints3.hs:290:19: Warning:
    Found hole ‘_’ with type: Int -> ReadS a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of readsPrec :: Read a => Int -> ReadS a
               at ExtraConstraints3.hs:291:1
    In the type signature for ‘readsPrec’: _ => _

ExtraConstraints3.hs:292:15: Warning:
    Found hole ‘_’ with inferred constraints: (Fractional b, Real a)
    In the type signature for ‘realToFrac’: _ => _

ExtraConstraints3.hs:292:20: Warning:
    Found hole ‘_’ with type: a -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of realToFrac :: (Fractional b, Real a) => a -> b
               at ExtraConstraints3.hs:293:1
           ‘b’ is a rigid type variable bound by
               the inferred type of realToFrac :: (Fractional b, Real a) => a -> b
               at ExtraConstraints3.hs:293:1
    In the type signature for ‘realToFrac’: _ => _

ExtraConstraints3.hs:294:10: Warning:
    Found hole ‘_’ with inferred constraints: (Fractional a)
    In the type signature for ‘recip’: _ => _

ExtraConstraints3.hs:294:15: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of recip :: Fractional a => a -> a
               at ExtraConstraints3.hs:295:1
    In the type signature for ‘recip’: _ => _

ExtraConstraints3.hs:296:8: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘rem’: _ => _

ExtraConstraints3.hs:296:13: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of rem :: Integral a => a -> a -> a
               at ExtraConstraints3.hs:297:1
    In the type signature for ‘rem’: _ => _

ExtraConstraints3.hs:298:11: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘repeat’: _ => _

ExtraConstraints3.hs:298:16: Warning:
    Found hole ‘_’ with type: a -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of repeat :: a -> [a]
               at ExtraConstraints3.hs:299:1
    In the type signature for ‘repeat’: _ => _

ExtraConstraints3.hs:300:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘replicate’: _ => _

ExtraConstraints3.hs:300:19: Warning:
    Found hole ‘_’ with type: Int -> a -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of replicate :: Int -> a -> [a]
               at ExtraConstraints3.hs:301:1
    In the type signature for ‘replicate’: _ => _

ExtraConstraints3.hs:302:11: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m)
    In the type signature for ‘return’: _ => _

ExtraConstraints3.hs:302:16: Warning:
    Found hole ‘_’ with type: a -> m a
    Where: ‘m’ is a rigid type variable bound by
               the inferred type of return :: Monad m => a -> m a
               at ExtraConstraints3.hs:303:1
           ‘a’ is a rigid type variable bound by
               the inferred type of return :: Monad m => a -> m a
               at ExtraConstraints3.hs:303:1
    In the type signature for ‘return’: _ => _

ExtraConstraints3.hs:304:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘reverse’: _ => _

ExtraConstraints3.hs:304:17: Warning:
    Found hole ‘_’ with type: [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of reverse :: [a] -> [a]
               at ExtraConstraints3.hs:305:1
    In the type signature for ‘reverse’: _ => _

ExtraConstraints3.hs:306:10: Warning:
    Found hole ‘_’ with inferred constraints: (Integral b, RealFrac a)
    In the type signature for ‘round’: _ => _

ExtraConstraints3.hs:306:15: Warning:
    Found hole ‘_’ with type: a -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of round :: (Integral b, RealFrac a) => a -> b
               at ExtraConstraints3.hs:307:1
           ‘b’ is a rigid type variable bound by
               the inferred type of round :: (Integral b, RealFrac a) => a -> b
               at ExtraConstraints3.hs:307:1
    In the type signature for ‘round’: _ => _

ExtraConstraints3.hs:308:15: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘scaleFloat’: _ => _

ExtraConstraints3.hs:308:20: Warning:
    Found hole ‘_’ with type: Int -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of scaleFloat :: RealFloat a => Int -> a -> a
               at ExtraConstraints3.hs:309:1
    In the type signature for ‘scaleFloat’: _ => _

ExtraConstraints3.hs:310:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘scanl’: _ => _

ExtraConstraints3.hs:310:15: Warning:
    Found hole ‘_’ with type: (b -> a -> b) -> b -> [a] -> [b]
    Where: ‘b’ is a rigid type variable bound by
               the inferred type of scanl :: (b -> a -> b) -> b -> [a] -> [b]
               at ExtraConstraints3.hs:311:1
           ‘a’ is a rigid type variable bound by
               the inferred type of scanl :: (b -> a -> b) -> b -> [a] -> [b]
               at ExtraConstraints3.hs:311:1
    In the type signature for ‘scanl’: _ => _

ExtraConstraints3.hs:312:11: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘scanl1’: _ => _

ExtraConstraints3.hs:312:16: Warning:
    Found hole ‘_’ with type: (a -> a -> a) -> [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of scanl1 :: (a -> a -> a) -> [a] -> [a]
               at ExtraConstraints3.hs:313:1
    In the type signature for ‘scanl1’: _ => _

ExtraConstraints3.hs:314:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘scanr’: _ => _

ExtraConstraints3.hs:314:15: Warning:
    Found hole ‘_’ with type: (a -> b -> b) -> b -> [a] -> [b]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of scanr :: (a -> b -> b) -> b -> [a] -> [b]
               at ExtraConstraints3.hs:315:1
           ‘b’ is a rigid type variable bound by
               the inferred type of scanr :: (a -> b -> b) -> b -> [a] -> [b]
               at ExtraConstraints3.hs:315:1
    In the type signature for ‘scanr’: _ => _

ExtraConstraints3.hs:316:11: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘scanr1’: _ => _

ExtraConstraints3.hs:316:16: Warning:
    Found hole ‘_’ with type: (a -> a -> a) -> [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of scanr1 :: (a -> a -> a) -> [a] -> [a]
               at ExtraConstraints3.hs:317:1
    In the type signature for ‘scanr1’: _ => _

ExtraConstraints3.hs:318:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘seq’: _ => _

ExtraConstraints3.hs:318:13: Warning:
    Found hole ‘_’ with type: a -> b -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of seq :: a -> b -> b
               at ExtraConstraints3.hs:319:1
           ‘b’ is a rigid type variable bound by
               the inferred type of seq :: a -> b -> b
               at ExtraConstraints3.hs:319:1
    In the type signature for ‘seq’: _ => _

ExtraConstraints3.hs:320:13: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m,
                                               P.Traversable t)
    In the type signature for ‘sequence’: _ => _

ExtraConstraints3.hs:320:18: Warning:
    Found hole ‘_’ with type: t (m a) -> m (t a)
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of
               sequence :: (Monad m, P.Traversable t) => t (m a) -> m (t a)
               at ExtraConstraints3.hs:321:1
           ‘m’ is a rigid type variable bound by
               the inferred type of
               sequence :: (Monad m, P.Traversable t) => t (m a) -> m (t a)
               at ExtraConstraints3.hs:321:1
           ‘a’ is a rigid type variable bound by
               the inferred type of
               sequence :: (Monad m, P.Traversable t) => t (m a) -> m (t a)
               at ExtraConstraints3.hs:321:1
    In the type signature for ‘sequence’: _ => _

ExtraConstraints3.hs:322:14: Warning:
    Found hole ‘_’ with inferred constraints: (Monad m, P.Foldable t)
    In the type signature for ‘sequence_’: _ => _

ExtraConstraints3.hs:322:19: Warning:
    Found hole ‘_’ with type: t (m a) -> m ()
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of
               sequence_ :: (Monad m, P.Foldable t) => t (m a) -> m ()
               at ExtraConstraints3.hs:323:1
           ‘m’ is a rigid type variable bound by
               the inferred type of
               sequence_ :: (Monad m, P.Foldable t) => t (m a) -> m ()
               at ExtraConstraints3.hs:323:1
           ‘a’ is a rigid type variable bound by
               the inferred type of
               sequence_ :: (Monad m, P.Foldable t) => t (m a) -> m ()
               at ExtraConstraints3.hs:323:1
    In the type signature for ‘sequence_’: _ => _

ExtraConstraints3.hs:324:9: Warning:
    Found hole ‘_’ with inferred constraints: (Show a)
    In the type signature for ‘show’: _ => _

ExtraConstraints3.hs:324:14: Warning:
    Found hole ‘_’ with type: a -> String
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of show :: Show a => a -> String
               at ExtraConstraints3.hs:325:1
    In the type signature for ‘show’: _ => _

ExtraConstraints3.hs:326:13: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘showChar’: _ => _

ExtraConstraints3.hs:326:18: Warning:
    Found hole ‘_’ with type: Char -> ShowS
    In the type signature for ‘showChar’: _ => _

ExtraConstraints3.hs:328:13: Warning:
    Found hole ‘_’ with inferred constraints: (Show a)
    In the type signature for ‘showList’: _ => _

ExtraConstraints3.hs:328:18: Warning:
    Found hole ‘_’ with type: [a] -> ShowS
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of showList :: Show a => [a] -> ShowS
               at ExtraConstraints3.hs:329:1
    In the type signature for ‘showList’: _ => _

ExtraConstraints3.hs:330:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘showParen’: _ => _

ExtraConstraints3.hs:330:19: Warning:
    Found hole ‘_’ with type: Bool -> ShowS -> ShowS
    In the type signature for ‘showParen’: _ => _

ExtraConstraints3.hs:332:15: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘showString’: _ => _

ExtraConstraints3.hs:332:20: Warning:
    Found hole ‘_’ with type: String -> ShowS
    In the type signature for ‘showString’: _ => _

ExtraConstraints3.hs:334:10: Warning:
    Found hole ‘_’ with inferred constraints: (Show a)
    In the type signature for ‘shows’: _ => _

ExtraConstraints3.hs:334:15: Warning:
    Found hole ‘_’ with type: a -> ShowS
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of shows :: Show a => a -> ShowS
               at ExtraConstraints3.hs:335:1
    In the type signature for ‘shows’: _ => _

ExtraConstraints3.hs:336:14: Warning:
    Found hole ‘_’ with inferred constraints: (Show a)
    In the type signature for ‘showsPrec’: _ => _

ExtraConstraints3.hs:336:19: Warning:
    Found hole ‘_’ with type: Int -> a -> ShowS
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of showsPrec :: Show a => Int -> a -> ShowS
               at ExtraConstraints3.hs:337:1
    In the type signature for ‘showsPrec’: _ => _

ExtraConstraints3.hs:338:16: Warning:
    Found hole ‘_’ with inferred constraints: (RealFloat a)
    In the type signature for ‘significand’: _ => _

ExtraConstraints3.hs:338:21: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of significand :: RealFloat a => a -> a
               at ExtraConstraints3.hs:339:1
    In the type signature for ‘significand’: _ => _

ExtraConstraints3.hs:340:11: Warning:
    Found hole ‘_’ with inferred constraints: (Num a)
    In the type signature for ‘signum’: _ => _

ExtraConstraints3.hs:340:16: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of signum :: Num a => a -> a
               at ExtraConstraints3.hs:341:1
    In the type signature for ‘signum’: _ => _

ExtraConstraints3.hs:342:8: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘sin’: _ => _

ExtraConstraints3.hs:342:13: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of sin :: Floating a => a -> a
               at ExtraConstraints3.hs:343:1
    In the type signature for ‘sin’: _ => _

ExtraConstraints3.hs:344:9: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘sinh’: _ => _

ExtraConstraints3.hs:344:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of sinh :: Floating a => a -> a
               at ExtraConstraints3.hs:345:1
    In the type signature for ‘sinh’: _ => _

ExtraConstraints3.hs:346:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘snd’: _ => _

ExtraConstraints3.hs:346:13: Warning:
    Found hole ‘_’ with type: (a, b) -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of snd :: (a, b) -> b
               at ExtraConstraints3.hs:347:1
           ‘b’ is a rigid type variable bound by
               the inferred type of snd :: (a, b) -> b
               at ExtraConstraints3.hs:347:1
    In the type signature for ‘snd’: _ => _

ExtraConstraints3.hs:348:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘span’: _ => _

ExtraConstraints3.hs:348:14: Warning:
    Found hole ‘_’ with type: (a -> Bool) -> [a] -> ([a], [a])
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of span :: (a -> Bool) -> [a] -> ([a], [a])
               at ExtraConstraints3.hs:349:1
    In the type signature for ‘span’: _ => _

ExtraConstraints3.hs:350:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘splitAt’: _ => _

ExtraConstraints3.hs:350:17: Warning:
    Found hole ‘_’ with type: Int -> [a] -> ([a], [a])
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of splitAt :: Int -> [a] -> ([a], [a])
               at ExtraConstraints3.hs:351:1
    In the type signature for ‘splitAt’: _ => _

ExtraConstraints3.hs:352:9: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘sqrt’: _ => _

ExtraConstraints3.hs:352:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of sqrt :: Floating a => a -> a
               at ExtraConstraints3.hs:353:1
    In the type signature for ‘sqrt’: _ => _

ExtraConstraints3.hs:354:13: Warning:
    Found hole ‘_’ with inferred constraints: (Num a)
    In the type signature for ‘subtract’: _ => _

ExtraConstraints3.hs:354:18: Warning:
    Found hole ‘_’ with type: a -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of subtract :: Num a => a -> a -> a
               at ExtraConstraints3.hs:355:1
    In the type signature for ‘subtract’: _ => _

ExtraConstraints3.hs:356:9: Warning:
    Found hole ‘_’ with inferred constraints: (Enum a)
    In the type signature for ‘succ’: _ => _

ExtraConstraints3.hs:356:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of succ :: Enum a => a -> a
               at ExtraConstraints3.hs:357:1
    In the type signature for ‘succ’: _ => _

ExtraConstraints3.hs:358:8: Warning:
    Found hole ‘_’ with inferred constraints: (Num a, P.Foldable t)
    In the type signature for ‘sum’: _ => _

ExtraConstraints3.hs:358:13: Warning:
    Found hole ‘_’ with type: t a -> a
    Where: ‘t’ is a rigid type variable bound by
               the inferred type of sum :: (Num a, P.Foldable t) => t a -> a
               at ExtraConstraints3.hs:359:1
           ‘a’ is a rigid type variable bound by
               the inferred type of sum :: (Num a, P.Foldable t) => t a -> a
               at ExtraConstraints3.hs:359:1
    In the type signature for ‘sum’: _ => _

ExtraConstraints3.hs:360:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘tail’: _ => _

ExtraConstraints3.hs:360:14: Warning:
    Found hole ‘_’ with type: [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of tail :: [a] -> [a]
               at ExtraConstraints3.hs:361:1
    In the type signature for ‘tail’: _ => _

ExtraConstraints3.hs:362:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘take’: _ => _

ExtraConstraints3.hs:362:14: Warning:
    Found hole ‘_’ with type: Int -> [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of take :: Int -> [a] -> [a]
               at ExtraConstraints3.hs:363:1
    In the type signature for ‘take’: _ => _

ExtraConstraints3.hs:364:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘takeWhile’: _ => _

ExtraConstraints3.hs:364:19: Warning:
    Found hole ‘_’ with type: (a -> Bool) -> [a] -> [a]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of takeWhile :: (a -> Bool) -> [a] -> [a]
               at ExtraConstraints3.hs:365:1
    In the type signature for ‘takeWhile’: _ => _

ExtraConstraints3.hs:366:8: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘tan’: _ => _

ExtraConstraints3.hs:366:13: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of tan :: Floating a => a -> a
               at ExtraConstraints3.hs:367:1
    In the type signature for ‘tan’: _ => _

ExtraConstraints3.hs:368:9: Warning:
    Found hole ‘_’ with inferred constraints: (Floating a)
    In the type signature for ‘tanh’: _ => _

ExtraConstraints3.hs:368:14: Warning:
    Found hole ‘_’ with type: a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of tanh :: Floating a => a -> a
               at ExtraConstraints3.hs:369:1
    In the type signature for ‘tanh’: _ => _

ExtraConstraints3.hs:370:11: Warning:
    Found hole ‘_’ with inferred constraints: (Enum a)
    In the type signature for ‘toEnum’: _ => _

ExtraConstraints3.hs:370:16: Warning:
    Found hole ‘_’ with type: Int -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of toEnum :: Enum a => Int -> a
               at ExtraConstraints3.hs:371:1
    In the type signature for ‘toEnum’: _ => _

ExtraConstraints3.hs:372:14: Warning:
    Found hole ‘_’ with inferred constraints: (Integral a)
    In the type signature for ‘toInteger’: _ => _

ExtraConstraints3.hs:372:19: Warning:
    Found hole ‘_’ with type: a -> Integer
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of toInteger :: Integral a => a -> Integer
               at ExtraConstraints3.hs:373:1
    In the type signature for ‘toInteger’: _ => _

ExtraConstraints3.hs:374:15: Warning:
    Found hole ‘_’ with inferred constraints: (Real a)
    In the type signature for ‘toRational’: _ => _

ExtraConstraints3.hs:374:20: Warning:
    Found hole ‘_’ with type: a -> Rational
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of toRational :: Real a => a -> Rational
               at ExtraConstraints3.hs:375:1
    In the type signature for ‘toRational’: _ => _

ExtraConstraints3.hs:376:13: Warning:
    Found hole ‘_’ with inferred constraints: (Integral b, RealFrac a)
    In the type signature for ‘truncate’: _ => _

ExtraConstraints3.hs:376:18: Warning:
    Found hole ‘_’ with type: a -> b
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of truncate :: (Integral b, RealFrac a) => a -> b
               at ExtraConstraints3.hs:377:1
           ‘b’ is a rigid type variable bound by
               the inferred type of truncate :: (Integral b, RealFrac a) => a -> b
               at ExtraConstraints3.hs:377:1
    In the type signature for ‘truncate’: _ => _

ExtraConstraints3.hs:378:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘uncurry’: _ => _

ExtraConstraints3.hs:378:17: Warning:
    Found hole ‘_’ with type: (a -> b -> c) -> (a, b) -> c
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of uncurry :: (a -> b -> c) -> (a, b) -> c
               at ExtraConstraints3.hs:379:1
           ‘b’ is a rigid type variable bound by
               the inferred type of uncurry :: (a -> b -> c) -> (a, b) -> c
               at ExtraConstraints3.hs:379:1
           ‘c’ is a rigid type variable bound by
               the inferred type of uncurry :: (a -> b -> c) -> (a, b) -> c
               at ExtraConstraints3.hs:379:1
    In the type signature for ‘uncurry’: _ => _

ExtraConstraints3.hs:380:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘undefined’: _ => _

ExtraConstraints3.hs:380:19: Warning:
    Found hole ‘_’ with type: w_
    Where: ‘w_’ is a rigid type variable bound by
                the inferred type of undefined :: w_ at ExtraConstraints3.hs:381:1
    In the type signature for ‘undefined’: _ => _

ExtraConstraints3.hs:382:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘unlines’: _ => _

ExtraConstraints3.hs:382:17: Warning:
    Found hole ‘_’ with type: [String] -> String
    In the type signature for ‘unlines’: _ => _

ExtraConstraints3.hs:384:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘until’: _ => _

ExtraConstraints3.hs:384:15: Warning:
    Found hole ‘_’ with type: (a -> Bool) -> (a -> a) -> a -> a
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of until :: (a -> Bool) -> (a -> a) -> a -> a
               at ExtraConstraints3.hs:385:1
    In the type signature for ‘until’: _ => _

ExtraConstraints3.hs:386:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘unwords’: _ => _

ExtraConstraints3.hs:386:17: Warning:
    Found hole ‘_’ with type: [String] -> String
    In the type signature for ‘unwords’: _ => _

ExtraConstraints3.hs:388:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘unzip’: _ => _

ExtraConstraints3.hs:388:15: Warning:
    Found hole ‘_’ with type: [(a, b)] -> ([a], [b])
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of unzip :: [(a, b)] -> ([a], [b])
               at ExtraConstraints3.hs:389:1
           ‘b’ is a rigid type variable bound by
               the inferred type of unzip :: [(a, b)] -> ([a], [b])
               at ExtraConstraints3.hs:389:1
    In the type signature for ‘unzip’: _ => _

ExtraConstraints3.hs:390:11: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘unzip3’: _ => _

ExtraConstraints3.hs:390:16: Warning:
    Found hole ‘_’ with type: [(a, b, c)] -> ([a], [b], [c])
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of unzip3 :: [(a, b, c)] -> ([a], [b], [c])
               at ExtraConstraints3.hs:391:1
           ‘b’ is a rigid type variable bound by
               the inferred type of unzip3 :: [(a, b, c)] -> ([a], [b], [c])
               at ExtraConstraints3.hs:391:1
           ‘c’ is a rigid type variable bound by
               the inferred type of unzip3 :: [(a, b, c)] -> ([a], [b], [c])
               at ExtraConstraints3.hs:391:1
    In the type signature for ‘unzip3’: _ => _

ExtraConstraints3.hs:392:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘userError’: _ => _

ExtraConstraints3.hs:392:19: Warning:
    Found hole ‘_’ with type: String -> IOError
    In the type signature for ‘userError’: _ => _

ExtraConstraints3.hs:394:10: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘words’: _ => _

ExtraConstraints3.hs:394:15: Warning:
    Found hole ‘_’ with type: String -> [String]
    In the type signature for ‘words’: _ => _

ExtraConstraints3.hs:396:14: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘writeFile’: _ => _

ExtraConstraints3.hs:396:19: Warning:
    Found hole ‘_’ with type: FilePath -> String -> IO ()
    In the type signature for ‘writeFile’: _ => _

ExtraConstraints3.hs:398:8: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘zip’: _ => _

ExtraConstraints3.hs:398:13: Warning:
    Found hole ‘_’ with type: [a] -> [b] -> [(a, b)]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of zip :: [a] -> [b] -> [(a, b)]
               at ExtraConstraints3.hs:399:1
           ‘b’ is a rigid type variable bound by
               the inferred type of zip :: [a] -> [b] -> [(a, b)]
               at ExtraConstraints3.hs:399:1
    In the type signature for ‘zip’: _ => _

ExtraConstraints3.hs:400:9: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘zip3’: _ => _

ExtraConstraints3.hs:400:14: Warning:
    Found hole ‘_’ with type: [a] -> [b] -> [c] -> [(a, b, c)]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
               at ExtraConstraints3.hs:401:1
           ‘b’ is a rigid type variable bound by
               the inferred type of zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
               at ExtraConstraints3.hs:401:1
           ‘c’ is a rigid type variable bound by
               the inferred type of zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
               at ExtraConstraints3.hs:401:1
    In the type signature for ‘zip3’: _ => _

ExtraConstraints3.hs:402:12: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘zipWith’: _ => _

ExtraConstraints3.hs:402:17: Warning:
    Found hole ‘_’ with type: (a -> b -> c) -> [a] -> [b] -> [c]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
               at ExtraConstraints3.hs:403:1
           ‘b’ is a rigid type variable bound by
               the inferred type of zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
               at ExtraConstraints3.hs:403:1
           ‘c’ is a rigid type variable bound by
               the inferred type of zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
               at ExtraConstraints3.hs:403:1
    In the type signature for ‘zipWith’: _ => _

ExtraConstraints3.hs:404:13: Warning:
    Found hole ‘_’ with inferred constraints: ()
    In the type signature for ‘zipWith3’: _ => _

ExtraConstraints3.hs:404:18: Warning:
    Found hole ‘_’
      with type: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
    Where: ‘a’ is a rigid type variable bound by
               the inferred type of
               zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
               at ExtraConstraints3.hs:405:1
           ‘b’ is a rigid type variable bound by
               the inferred type of
               zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
               at ExtraConstraints3.hs:405:1
           ‘c’ is a rigid type variable bound by
               the inferred type of
               zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
               at ExtraConstraints3.hs:405:1
           ‘d’ is a rigid type variable bound by
               the inferred type of
               zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
               at ExtraConstraints3.hs:405:1
    In the type signature for ‘zipWith3’: _ => _
